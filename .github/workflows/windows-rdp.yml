name: Windows RDP via Ngrok (S·ª≠ d·ª•ng Secret - ƒê√£ s·ª≠a ƒë∆∞·ªùng d·∫´n Ngrok)

on: workflow_dispatch # Ch·∫°y th·ªß c√¥ng

jobs:
  build:
    runs-on: windows-latest # Ch·∫°y tr√™n m√°y ·∫£o Windows
    timeout-minutes: 9999 # Gi·ªØ ch·∫°y l√¢u nh·∫•t c√≥ th·ªÉ (trong gi·ªõi h·∫°n c·ªßa GitHub)

    steps:
    # B∆∞·ªõc 1: T·∫£i Ngrok (Gi·∫£i n√©n tr·ª±c ti·∫øp v√†o th∆∞ m·ª•c hi·ªán t·∫°i)
    - name: T·∫£i Ngrok
      shell: powershell
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath . # Ngrok.exe s·∫Ω ·ªü th∆∞ m·ª•c hi·ªán t·∫°i
        Write-Host "‚úÖ ƒê√£ t·∫£i v√† gi·∫£i n√©n Ngrok."

    # B∆∞·ªõc 2: X√°c th·ª±c Ngrok (S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n ƒë√∫ng)
    - name: K·∫øt n·ªëi t√†i kho·∫£n Ngrok (D√πng Secret)
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      shell: powershell
      run: |
        if (-not $Env:NGROK_AUTH_TOKEN) {
            Write-Error "L·ªói: Secret 'NGROK_AUTH_TOKEN' ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t trong c√†i ƒë·∫∑t kho l∆∞u tr·ªØ!"
            exit 1
        }
        # ƒê∆∞·ªùng d·∫´n ƒë√∫ng l√† .\ngrok.exe
        .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        Write-Host "‚úÖ ƒê√£ c·∫•u h√¨nh Ngrok Authtoken t·ª´ Secret."

    # B∆∞·ªõc 3: K√≠ch ho·∫°t RDP tr√™n Windows
    - name: K√≠ch ho·∫°t truy c·∫≠p Remote Desktop (RDP)
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Write-Host "‚úÖ ƒê√£ k√≠ch ho·∫°t RDP v√† m·ªü Firewall."

    # B∆∞·ªõc 4: T·∫°o ng∆∞·ªùi d√πng v√† ƒë·∫∑t m·∫≠t kh·∫©u m·∫°nh
    - name: T·∫°o ng∆∞·ªùi d√πng RDP v√† ƒë·∫∑t m·∫≠t kh·∫©u
      shell: powershell
      run: |
        $userName = "havpc01"
        # --- !!! QUAN TR·ªåNG: THAY ƒê·ªîI M·∫¨T KH·∫®U N√ÄY !!! ---
        $password = "HavpcRDP@2025!" # Thay b·∫±ng m·∫≠t kh·∫©u m·∫°nh c·ªßa b·∫°n
        # -------------------------------------------------
        Write-Host "INFO: ƒêang t·∫°o ng∆∞·ªùi d√πng '$userName' v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë·∫∑t."
        $secPassword = ConvertTo-SecureString $password -AsPlainText -Force
        try {
            New-LocalUser -Name $userName -Password $secPassword -FullName "$userName (GitHub Actions)" -Description "Temp RDP User" -ErrorAction Stop
        } catch {
             Write-Error "L·ªói khi t·∫°o ng∆∞·ªùi d√πng '$userName': $_"
             Write-Warning "Th·ª≠ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng '$userName' ƒë√£ t·ªìn t·∫°i..."
             try { Set-LocalUser -Name $userName -Password $secPassword -ErrorAction Stop; Write-Host "ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." } catch { Write-Error "L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: $_"; exit 1 }
        }
        try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member $userName -ErrorAction Stop } catch { if ($_.Exception.Message -like "*already a member*") { Write-Warning "'$userName' ƒë√£ l√† th√†nh vi√™n RDP." } else { Write-Error "L·ªói th√™m v√†o nh√≥m RDP: $_"; exit 1 } }
        try { Add-LocalGroupMember -Group "Administrators" -Member $userName -ErrorAction Stop; Write-Host "ƒê√£ th√™m '$userName' v√†o nh√≥m 'Administrators'." } catch { if ($_.Exception.Message -like "*already a member*") { Write-Warning "'$userName' ƒë√£ l√† Admin." } else { Write-Warning "L·ªói th√™m v√†o Admin: $_" } }
        Write-Host "--------------------------------------------------" -ForegroundColor Green
        Write-Host "‚úÖ ƒê√£ t·∫°o/c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng RDP!" -ForegroundColor Green
        Write-Host "   üë§ Username: $userName" -ForegroundColor Green
        Write-Host "   üîë Password: $password" -ForegroundColor Green
        Write-Host "--------------------------------------------------" -ForegroundColor Green

    # B∆∞·ªõc 5: Kh·ªüi ƒë·ªông Ngrok Tunnel trong n·ªÅn (S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n ƒë√∫ng)
    - name: T·∫°o Ngrok Tunnel cho RDP (C·ªïng 3389)
      shell: powershell
      run: |
        Write-Host "ƒêang kh·ªüi ƒë·ªông Ngrok tunnel cho c·ªïng 3389 trong n·ªÅn..."
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
        # ƒê∆∞·ªùng d·∫´n ƒë√∫ng l√† .\ngrok.exe
        Start-Process powershell -ArgumentList "-NoExit", "-Command", "`".\ngrok.exe tcp 3389 --log '$ngrokLogPath'`""
        Write-Host "INFO: Ngrok ƒëang ch·∫°y n·ªÅn. Log t·∫°i: $ngrokLogPath"

    # B∆∞·ªõc 6: L·∫•y v√† hi·ªÉn th·ªã URL Ngrok (v·ªõi ki·ªÉm tra v√† tƒÉng th·ªùi gian ch·ªù)
    - name: L·∫•y v√† hi·ªÉn th·ªã ƒë·ªãa ch·ªâ k·∫øt n·ªëi Ngrok
      shell: powershell
      run: |
        $maxAttempts = 5
        $waitTime = 15
        for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            Write-Host "‚è≥ L·∫ßn th·ª≠ $attempt/$maxAttempts: Ch·ªù $waitTime gi√¢y..."
            Start-Sleep -Seconds $waitTime
            Write-Host "‚è≥ Ki·ªÉm tra ti·∫øn tr√¨nh Ngrok..."
            $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
            if (-not $ngrokProcess) { Write-Warning "‚ùå L·ªói: Ti·∫øn tr√¨nh ngrok.exe kh√¥ng ch·∫°y!"; continue }
            Write-Host "‚úÖ Ngrok ƒëang ch·∫°y (PID: $($ngrokProcess.Id)). L·∫•y URL API..."
            try {
                $tunnels = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 10 -ErrorAction Stop
                $tcpTunnel = $tunnels.tunnels | Where-Object {$_.proto -eq 'tcp'} | Select-Object -First 1
                if ($tcpTunnel) {
                    Write-Host "--------------------------------------------------" -ForegroundColor Cyan
                    Write-Host "‚úÖ ƒê·ªãa ch·ªâ k·∫øt n·ªëi RDP (Ngrok URL): $($tcpTunnel.public_url)" -ForegroundColor Cyan
                    Write-Host "   (S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ n√†y trong Remote Desktop Client)" -ForegroundColor Cyan
                    Write-Host "--------------------------------------------------" -ForegroundColor Cyan
                    exit 0 # Th√†nh c√¥ng
                } else { Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tunnel TCP t·ª´ API l·∫ßn $attempt." }
            } catch { Write-Warning "‚ùå L·ªói l·∫•y URL l·∫ßn $attempt: $_" }
        }
        Write-Error "‚ùå Kh√¥ng th·ªÉ l·∫•y URL Ngrok sau $maxAttempts l·∫ßn th·ª≠."
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
        if (Test-Path $ngrokLogPath) { Write-Host "--- Log Ngrok ---"; Get-Content $ngrokLogPath -Tail 10; Write-Host "-----------------" }
        exit 1 # B√°o l·ªói workflow

    # B∆∞·ªõc 7: Gi·ªØ cho Workflow ch·∫°y
    - name: Gi·ªØ cho Workflow ho·∫°t ƒë·ªông
      shell: powershell
      run: |
        Write-Host "‚úÖ M√°y ·∫£o Windows RDP s·∫µn s√†ng! Ngrok ƒëang ch·∫°y." -ForegroundColor Green
        Write-Host "   Workflow s·∫Ω ti·∫øp t·ª•c ch·∫°y ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi."
        while ($true) { Start-Sleep -Seconds 300; Write-Host "$(Get-Date): Workflow v·∫´n ƒëang ch·∫°y..." }
