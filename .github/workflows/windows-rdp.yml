name: Ho√†ng Anh V≈©

on: workflow_dispatch # Ch·∫°y th·ªß c√¥ng

jobs:
  build:
    runs-on: windows-latest # Ch·∫°y tr√™n m√°y ·∫£o Windows
    timeout-minutes: 9999 # Gi·ªØ ch·∫°y l√¢u nh·∫•t c√≥ th·ªÉ (trong gi·ªõi h·∫°n c·ªßa GitHub)

    steps:
    # B∆∞·ªõc 1: T·∫£i Ngrok
    - name: T·∫£i Ngrok
      shell: powershell # ƒê·∫£m b·∫£o d√πng PowerShell
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath .

    # B∆∞·ªõc 2: X√°c th·ª±c Ngrok (S·ª≠ d·ª•ng GitHub Secrets - AN TO√ÄN H∆†N)
    - name: K·∫øt n·ªëi t√†i kho·∫£n Ngrok (D√πng Secret)
      env:
        # L·∫•y token t·ª´ GitHub Secrets
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      shell: powershell
      run: |
        if (-not $Env:NGROK_AUTH_TOKEN) {
            Write-Error "L·ªói: Secret 'NGROK_AUTH_TOKEN' ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t trong c√†i ƒë·∫∑t kho l∆∞u tr·ªØ!"
            exit 1
        }
        .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        Write-Host "‚úÖ ƒê√£ c·∫•u h√¨nh Ngrok Authtoken t·ª´ Secret."

    # B∆∞·ªõc 3: K√≠ch ho·∫°t RDP tr√™n Windows
    - name: K√≠ch ho·∫°t truy c·∫≠p Remote Desktop (RDP)
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Write-Host "‚úÖ ƒê√£ k√≠ch ho·∫°t RDP v√† m·ªü Firewall."

    # B∆∞·ªõc 4: T·∫°o ng∆∞·ªùi d√πng v√† ƒë·∫∑t m·∫≠t kh·∫©u m·∫°nh
    - name: T·∫°o ng∆∞·ªùi d√πng RDP v√† ƒë·∫∑t m·∫≠t kh·∫©u
      shell: powershell
      run: |
        $userName = "havpc01"
        # --- !!! QUAN TR·ªåNG: THAY ƒê·ªîI M·∫¨T KH·∫®U N√ÄY !!! ---
        # H√£y s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh, duy nh·∫•t c·ªßa ri√™ng b·∫°n.
        $password = "StrongP@sswOrd!2024"
        # -------------------------------------------------
        Write-Host "INFO: ƒêang t·∫°o ng∆∞·ªùi d√πng '$userName' v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë·∫∑t."

        # T·∫°o ƒë·ªëi t∆∞·ª£ng m·∫≠t kh·∫©u an to√†n
        $secPassword = ConvertTo-SecureString $password -AsPlainText -Force

        # T·∫°o ng∆∞·ªùi d√πng c·ª•c b·ªô m·ªõi
        try {
            New-LocalUser -Name $userName -Password $secPassword -FullName "$userName (GitHub Actions)" -Description "Temp RDP User" -ErrorAction Stop
        } catch {
             Write-Error "L·ªói khi t·∫°o ng∆∞·ªùi d√πng '$userName': $_"
             # C√≥ th·ªÉ ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i t·ª´ l·∫ßn ch·∫°y tr∆∞·ªõc? Th·ª≠ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
             Write-Warning "Th·ª≠ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng '$userName' ƒë√£ t·ªìn t·∫°i..."
             try {
                 Set-LocalUser -Name $userName -Password $secPassword -ErrorAction Stop
                 Write-Host "ƒê√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho ng∆∞·ªùi d√πng '$userName' ƒë√£ t·ªìn t·∫°i."
             } catch {
                 Write-Error "L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho '$userName': $_ . Kh√¥ng th·ªÉ ti·∫øp t·ª•c."
                 exit 1
             }
        }


        # Th√™m ng∆∞·ªùi d√πng v√†o nh√≥m Remote Desktop Users ƒë·ªÉ cho ph√©p ƒëƒÉng nh·∫≠p
        try {
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $userName -ErrorAction Stop
        } catch {
             Write-Error "L·ªói khi th√™m '$userName' v√†o nh√≥m 'Remote Desktop Users': $_"
             # C√≥ th·ªÉ ƒë√£ l√† th√†nh vi√™n?
             if ($_.Exception.Message -like "*already a member*") {
                 Write-Warning "'$userName' ƒë√£ l√† th√†nh vi√™n c·ªßa 'Remote Desktop Users'."
             } else {
                 exit 1
             }
        }


        # (T√πy ch·ªçn) Th√™m ng∆∞·ªùi d√πng v√†o nh√≥m Administrators ƒë·ªÉ c√≥ quy·ªÅn qu·∫£n tr·ªã cao h∆°n
        try {
            Add-LocalGroupMember -Group "Administrators" -Member $userName -ErrorAction Stop
             Write-Host "ƒê√£ th√™m '$userName' v√†o nh√≥m 'Administrators'."
        } catch {
             Write-Error "L·ªói khi th√™m '$userName' v√†o nh√≥m 'Administrators': $_"
             if ($_.Exception.Message -like "*already a member*") {
                 Write-Warning "'$userName' ƒë√£ l√† th√†nh vi√™n c·ªßa 'Administrators'."
             } else {
                 # Kh√¥ng tho√°t ·ªü ƒë√¢y, kh√¥ng ph·∫£i l·ªói nghi√™m tr·ªçng n·∫øu ch·ªâ kh√¥ng th√™m ƒë∆∞·ª£c v√†o admin
             }
        }


        Write-Host "--------------------------------------------------" -ForegroundColor Green
        Write-Host "‚úÖ ƒê√£ t·∫°o/c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng RDP th√†nh c√¥ng!" -ForegroundColor Green
        Write-Host "   üë§ T√™n ƒëƒÉng nh·∫≠p (Username): $userName" -ForegroundColor Green
        Write-Host "   üîë M·∫≠t kh·∫©u (Password)    : $password" -ForegroundColor Green
        Write-Host "--------------------------------------------------" -ForegroundColor Green

    # B∆∞·ªõc 5: Kh·ªüi ƒë·ªông Ngrok Tunnel trong n·ªÅn
    - name: T·∫°o Ngrok Tunnel cho RDP (C·ªïng 3389)
      shell: powershell
      run: |
        Write-Host "ƒêang kh·ªüi ƒë·ªông Ngrok tunnel cho c·ªïng 3389 trong n·ªÅn..."
        # Ch·∫°y ngrok trong ti·∫øn tr√¨nh ri√™ng, ghi log v√†o file ƒë·ªÉ c√≥ th·ªÉ xem sau n·∫øu c·∫ßn
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
        Start-Process powershell -ArgumentList "-NoExit", "-Command", "`".\ngrok\ngrok.exe tcp 3389 --log '$ngrokLogPath'`""
        Write-Host "INFO: Ngrok ƒëang ch·∫°y n·ªÅn. Log ƒë∆∞·ª£c ghi t·∫°i: $ngrokLogPath (n·∫øu c·∫ßn ki·ªÉm tra)."

    # B∆∞·ªõc 6: L·∫•y v√† hi·ªÉn th·ªã URL Ngrok (v·ªõi ki·ªÉm tra v√† tƒÉng th·ªùi gian ch·ªù)
    - name: L·∫•y v√† hi·ªÉn th·ªã ƒë·ªãa ch·ªâ k·∫øt n·ªëi Ngrok
      shell: powershell
      run: |
        $maxAttempts = 5
        $waitTime = 15 # Ch·ªù 15 gi√¢y gi·ªØa c√°c l·∫ßn th·ª≠

        for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
            Write-Host "‚è≥ L·∫ßn th·ª≠ $attempt/$maxAttempts: Ch·ªù $waitTime gi√¢y ƒë·ªÉ Ngrok kh·ªüi ƒë·ªông..."
            Start-Sleep -Seconds $waitTime

            Write-Host "‚è≥ Ki·ªÉm tra xem Ngrok c√≥ ƒëang ch·∫°y kh√¥ng..."
            $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
            if (-not $ngrokProcess) {
                Write-Warning "‚ùå L·ªói: Ti·∫øn tr√¨nh ngrok.exe d∆∞·ªùng nh∆∞ kh√¥ng ch·∫°y! Ki·ªÉm tra log Ngrok."
                # C√≥ th·ªÉ ƒë·ªçc v√†i d√≤ng cu·ªëi c·ªßa log ·ªü ƒë√¢y n·∫øu mu·ªën
                # $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
                # if (Test-Path $ngrokLogPath) { Get-Content $ngrokLogPath -Tail 10 | Write-Host }
                # Th·ª≠ l·∫°i sau khi ch·ªù th√™m
                continue
            }

            Write-Host "‚úÖ Ti·∫øn tr√¨nh Ngrok ƒëang ch·∫°y (PID: $($ngrokProcess.Id)). ƒêang l·∫•y URL t·ª´ API..."
            try {
                # L·∫•y th√¥ng tin tunnel t·ª´ API Ngrok
                $tunnels = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 10 -ErrorAction Stop
                $tcpTunnel = $tunnels.tunnels | Where-Object {$_.proto -eq 'tcp'} | Select-Object -First 1

                if ($tcpTunnel) {
                    Write-Host "--------------------------------------------------" -ForegroundColor Cyan
                    Write-Host "‚úÖ ƒê·ªãa ch·ªâ k·∫øt n·ªëi RDP (Ngrok URL): $($tcpTunnel.public_url)" -ForegroundColor Cyan
                    Write-Host "   (S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ n√†y trong Remote Desktop Client)" -ForegroundColor Cyan
                    Write-Host "--------------------------------------------------" -ForegroundColor Cyan
                    exit 0 # Tho√°t kh·ªèi script th√†nh c√¥ng
                } else {
                    Write-Warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tunnel TCP t·ª´ API Ngrok trong l·∫ßn th·ª≠ $attempt. Ki·ªÉm tra log Ngrok."
                }
            } catch {
                Write-Warning "‚ùå L·ªói khi l·∫•y URL Ngrok trong l·∫ßn th·ª≠ $attempt: $_"
                Write-Warning "   -> API Ngrok c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng ho·∫∑c c√≥ l·ªói kh√°c. Ki·ªÉm tra log Ngrok."
            }
        }

        # N·∫øu v√≤ng l·∫∑p k·∫øt th√∫c m√† kh√¥ng l·∫•y ƒë∆∞·ª£c URL
        Write-Error "‚ùå Kh√¥ng th·ªÉ l·∫•y URL Ngrok sau $maxAttempts l·∫ßn th·ª≠. Vui l√≤ng ki·ªÉm tra log Ngrok th·ªß c√¥ng."
        # In ra v√†i d√≤ng log cu·ªëi ƒë·ªÉ gi√∫p debug
        $ngrokLogPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ngrok.log"
        if (Test-Path $ngrokLogPath) {
            Write-Host "--- Log Ngrok (10 d√≤ng cu·ªëi) ---"
            Get-Content $ngrokLogPath -Tail 10
            Write-Host "-----------------------------"
        }
        exit 1 # B√°o l·ªói workflow

    # B∆∞·ªõc 7: Gi·ªØ cho Workflow ch·∫°y (ƒë·ªÉ RDP v√† Ngrok kh√¥ng b·ªã t·∫Øt)
    - name: Gi·ªØ cho Workflow ho·∫°t ƒë·ªông
      shell: powershell
      run: |
        Write-Host "‚úÖ M√°y ·∫£o Windows RDP ƒë√£ s·∫µn s√†ng v√† Ngrok ƒëang ch·∫°y!" -ForegroundColor Green
        Write-Host "   Workflow s·∫Ω ti·∫øp t·ª•c ch·∫°y ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi."
        Write-Host "   B·∫°n c√≥ th·ªÉ h·ªßy workflow th·ªß c√¥ng tr√™n GitHub Actions khi kh√¥ng c·∫ßn n·ªØa."
        # V√≤ng l·∫∑p ƒë∆°n gi·∫£n ƒë·ªÉ gi·ªØ workflow s·ªëng
        while ($true) {
            Start-Sleep -Seconds 300 # Ng·ªß 5 ph√∫t
            Write-Host "$(Get-Date): Workflow v·∫´n ƒëang ch·∫°y..."
        }
